version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: revmanager-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: revmanager_dev
      POSTGRES_USER: ${DB_USER:-revmanager}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-revmanager123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-revmanager}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - revmanager-network

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: revmanager-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-changeme}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - revmanager-network

  # Backend API Server
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile.prod
    container_name: revmanager-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER:-revmanager}:${DB_PASSWORD:-changeme}@postgres:5432/revmanager_prod
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      PORT: 3001
      CORS_ORIGIN: ${FRONTEND_URL:-http://localhost}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - uploads_data:/app/uploads
    networks:
      - revmanager-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Web Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=${BACKEND_URL:-http://localhost:3001}
    container_name: revmanager-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - revmanager-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer (optional, for scaling)
  nginx-lb:
    image: nginx:alpine
    container_name: revmanager-nginx
    restart: unless-stopped
    ports:
      - "443:443"
    volumes:
      - ./nginx-lb.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - revmanager-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local

networks:
  revmanager-network:
    driver: bridge
